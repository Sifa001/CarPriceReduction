# -*- coding: utf-8 -*-
"""CarPricePreduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oc189Wn7_p-5RknFUmYaCkoqsXwYDoco

"""Importing the Dependencies


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection"""

car_dataset = pd.read_csv('/content/Cardetails (1).csv')

car_dataset.head()

#checking the number of rows and columns
car_dataset.shape

#getting information about the dataset
car_dataset.info()

#checking the number of missing values
car_dataset.isnull().sum()

#checking category of data
print(car_dataset.fuel.value_counts())
print(car_dataset.seller_type.value_counts())
print(car_dataset.transmission.value_counts())
print(car_dataset.owner.value_counts())

"""Encoding the Data"""

#encoding "fuel" column
car_dataset.replace({'fuel':{'Petrol':0,'Diesel':1,'CNG':2,'LPG':3}}, inplace=True)
#encoding "seller_type" column
car_dataset.replace({'seller_type':{'Individual':0,'Dealer':1,'Trustmark Dealer':2}}, inplace=True)
#encoding "transmission" column
car_dataset.replace({'transmission':{'Manual':0,'Automatic':1}}, inplace=True)
#encoding "owner" column
car_dataset.replace({'owner':{'First Owner':0,'Second Owner':1,'Third Owner':2,'Fourth & Above Owner':3,'Test Drive Car':4}}, inplace=True)

car_dataset.head()



"""Splitting Data and Target"""

X = car_dataset.drop(['name','selling_price','mileage','engine','max_power','torque','seats'],axis=1)
Y = car_dataset['selling_price']

print(X)

print(Y)

"""Splitting Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 2)

"""Training the Mode

1. Linear Regression
"""

#loading the linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on Training data
training_data_prediction = lin_reg_model.predict(X_train)

#R squared Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared error :", error_score)

"""Visualize the Actual Prices and Predicted Prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

#prediction on Testing data
test_data_prediction = lin_reg_model.predict(X_test)



#R squared Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error :", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

"""2.Lasso Regression"""

#loading the lasso regression model
las_reg_model = Lasso()

las_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on Training data
training_data_prediction = las_reg_model.predict(X_train)

#R squared Error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared error :", error_score)

"""Visualize the Actual Prices and Predicted Prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

#prediction on Testing data
test_data_prediction = las_reg_model.predict(X_test)

#R squared Error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error :", error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()